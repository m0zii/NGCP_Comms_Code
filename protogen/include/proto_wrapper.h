/* This file was autogenerated. All changes will be undone. */

#ifndef _PROTO_WRAPPER_H_
#define _PROTO_WRAPPER_H_

#include <stdio.h>
#include <vcclr.h>
#include <protonet.h>
#using <mscorlib.dll>

using namespace System;
using namespace System::Runtime::InteropServices;

namespace Protonet
{
   public ref struct Header
   {
      uint8_t node_src_id;
      uint8_t node_dest_id;
      uint8_t sequence_number;
      uint8_t message_ttl;
      uint16_t message_type;
      uint16_t message_length;
      Header(){}
      Header(const Header% to_copy)
      {
         node_src_id = to_copy.node_src_id;
         node_dest_id = to_copy.node_dest_id;
         sequence_number = to_copy.sequence_number;
         message_ttl = to_copy.message_ttl;
         message_type = to_copy.message_type;
         message_length = to_copy.message_length;
      }
      Header(const proto_header_t to_copy)
      {
         node_src_id = to_copy.node_src_id;
         node_dest_id = to_copy.node_dest_id;
         sequence_number = to_copy.sequence_number;
         message_ttl = to_copy.message_ttl;
         message_type = to_copy.message_type;
         message_length = to_copy.message_length;
      }
   };

   public ref struct Enter
   {
      float64_t timestamp;
      Enter(){}
      Enter(const Enter% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Enter(const enter_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   public ref struct Exit
   {
      float64_t timestamp;
      Exit(){}
      Exit(const Exit% to_copy)
      {
         timestamp = to_copy.timestamp;
      }
      Exit(const exit_t to_copy)
      {
         timestamp = to_copy.timestamp;
      }
   };

   public ref struct UGVJoystick
   {
      uint8_t vehicle_id;
      float32_t steering;
      float32_t throttle;
      UGVJoystick(){}
      UGVJoystick(const UGVJoystick% to_copy)
      {
         vehicle_id = to_copy.vehicle_id;
         steering = to_copy.steering;
         throttle = to_copy.throttle;
      }
      UGVJoystick(const UGV_joystick_t to_copy)
      {
         vehicle_id = to_copy.vehicle_id;
         steering = to_copy.steering;
         throttle = to_copy.throttle;
      }
   };

   public ref struct UGVBatteryStatus
   {
      float64_t timestamp;
      float64_t voltage_3_3V;
      float64_t voltage_5V;
      float64_t voltage_12V;
      float64_t current_3_3V;
      float64_t current_5V;
      float64_t current_12V;
      UGVBatteryStatus(){}
      UGVBatteryStatus(const UGVBatteryStatus% to_copy)
      {
         timestamp = to_copy.timestamp;
         voltage_3_3V = to_copy.voltage_3_3V;
         voltage_5V = to_copy.voltage_5V;
         voltage_12V = to_copy.voltage_12V;
         current_3_3V = to_copy.current_3_3V;
         current_5V = to_copy.current_5V;
         current_12V = to_copy.current_12V;
      }
      UGVBatteryStatus(const UGV_battery_status_t to_copy)
      {
         timestamp = to_copy.timestamp;
         voltage_3_3V = to_copy.voltage_3_3V;
         voltage_5V = to_copy.voltage_5V;
         voltage_12V = to_copy.voltage_12V;
         current_3_3V = to_copy.current_3_3V;
         current_5V = to_copy.current_5V;
         current_12V = to_copy.current_12V;
      }
   };

   public delegate void* EnterCallback(int8_t, proto_header_t, enter_t, protonet::node*);
   public delegate void* ExitCallback(int8_t, proto_header_t, exit_t, protonet::node*);
   public delegate void* UGVJoystickCallback(int8_t, proto_header_t, UGV_joystick_t, protonet::node*);
   public delegate void* UGVBatteryStatusCallback(int8_t, proto_header_t, UGV_battery_status_t, protonet::node*);

   public ref class Node
   {
   public:
      Node(uint8_t node_id);
      ~Node();
      void Start();
      void AddUdpDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port);
      void AddUdpDatalink([System::Runtime::InteropServices::Out]int8_t% link_id,uint16_t port, String^ addr);
      void EstablishUdpEndpoint(int8_t link_id, uint8_t node_id, uint16_t port, String^ addr);
      void AddSerialDatalink([System::Runtime::InteropServices::Out]int8_t% link_id, uint32_t baud_rate, String^ device_path);
      void EstablishSerialEndpoint(int8_t link_id, uint8_t node_id);

   void SendEnter(
      uint8_t dest_id,
      float64_t timestamp);

   void SendExit(
      uint8_t dest_id,
      float64_t timestamp);

   void SendUGVJoystick(
      uint8_t dest_id,
      uint8_t vehicle_id,
      float32_t steering,
      float32_t throttle);

   void SendUGVBatteryStatus(
      uint8_t dest_id,
      float64_t timestamp,
      float64_t voltage_3_3V,
      float64_t voltage_5V,
      float64_t voltage_12V,
      float64_t current_3_3V,
      float64_t current_5V,
      float64_t current_12V);

   delegate void EnterDelegate(int8_t, Header^%, Enter^%, Protonet::Node^);
   delegate void ExitDelegate(int8_t, Header^%, Exit^%, Protonet::Node^);
   delegate void UGVJoystickDelegate(int8_t, Header^%, UGVJoystick^%, Protonet::Node^);
   delegate void UGVBatteryStatusDelegate(int8_t, Header^%, UGVBatteryStatus^%, Protonet::Node^);

   void RegisterEnterEvent(EnterDelegate^ EnterEvent);
   void RegisterExitEvent(ExitDelegate^ ExitEvent);
   void RegisterUGVJoystickEvent(UGVJoystickDelegate^ UGVJoystickEvent);
   void RegisterUGVBatteryStatusEvent(UGVBatteryStatusDelegate^ UGVBatteryStatusEvent);

   private:
      protonet::node* node;

      IntPtr OnEnterPtr;
      EnterCallback^ OnEnterCallback;
      EnterDelegate^ OnEnterDelegate;

      IntPtr OnExitPtr;
      ExitCallback^ OnExitCallback;
      ExitDelegate^ OnExitDelegate;

      IntPtr OnUGVJoystickPtr;
      UGVJoystickCallback^ OnUGVJoystickCallback;
      UGVJoystickDelegate^ OnUGVJoystickDelegate;

      IntPtr OnUGVBatteryStatusPtr;
      UGVBatteryStatusCallback^ OnUGVBatteryStatusCallback;
      UGVBatteryStatusDelegate^ OnUGVBatteryStatusDelegate;

      void* EnterHelper(int8_t link_id, proto_header_t header, enter_t enter, protonet::node* ptr);
      void* ExitHelper(int8_t link_id, proto_header_t header, exit_t exit, protonet::node* ptr);
      void* UGVJoystickHelper(int8_t link_id, proto_header_t header, UGV_joystick_t UGV_joystick, protonet::node* ptr);
      void* UGVBatteryStatusHelper(int8_t link_id, proto_header_t header, UGV_battery_status_t UGV_battery_status, protonet::node* ptr);

   };
}
#endif