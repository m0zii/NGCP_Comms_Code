/* This file was autogenerated. All changes will be undone. */

#include <datalink.h>
#include <protocol.h>
#include <queue.h>
#include <thread.h>

namespace protonet
{
   class node;

   typedef void* (*UGV_joystick_callback)(int8_t, proto_header_t, UGV_joystick_t, protonet::node* node_ptr);
   typedef void* (*UGV_battery_status_callback)(int8_t, proto_header_t, UGV_battery_status_t, protonet::node* node_ptr);

   class node
   {
   public:
      node(uint8_t node_id);
      node(uint8_t node_id, int32_t mode);
      ~node();
      void start();

      void add_serial(int8_t* link_id, uint32_t baud_rate, char device_path[50]);
      void add_udp(int8_t* link_id, uint16_t port);
      void add_udp(int8_t* link_id, uint16_t port, char addr[16]);

      void establish_serial(int8_t link_id, uint8_t node_id);
      void establish_udp(int8_t link_id, uint8_t node_id, uint16_t port, char addr[16]);

      uint8_t get_num_datalinks();
      int32_t query_datalink_connected(int8_t link_id);
      datalink_type_t query_datalink_type(int8_t link_id);

      void send_UGV_joystick(
         uint8_t dest_id,
         uint8_t vehicle_id,
         float32_t steering,
         float32_t throttle);

      void send_UGV_battery_status(
         uint8_t dest_id,
         float64_t timestamp,
         float64_t 3_3V_voltage,
         float64_t 5V_voltage,
         float64_t 12V_voltage,
         float64_t 3_3V_current,
         float64_t 5V_current,
         float64_t 12V_current);

      void register_on_UGV_joystick(UGV_joystick_callback callback){on_UGV_joystick = callback;}
      void register_on_UGV_battery_status(UGV_battery_status_callback callback){on_UGV_battery_status = callback;}

   private:
      uint8_t node_id;

      int8_t num_datalinks;
      datalink* datalinks[255];
      thread_t datalink_threads[255];

      proto_msg_queue queue;
      void handle_proto_msg_t(proto_msg_t* rx_msg, proto_msg_buf_t* rx_buf);

      thread_t handler_thread;
      void protonet_handler();
      static void* handler_helper(void* context);

      thread_t upkeep_thread;
      void upkeep_handler();
      static void* upkeep_helper(void* context);

      void null_callback_storage();

      UGV_joystick_callback on_UGV_joystick;
      UGV_battery_status_callback on_UGV_battery_status;
   };
}